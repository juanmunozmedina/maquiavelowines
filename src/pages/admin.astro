---
import PrimaryLayout from '~/layouts/PrimaryLayout.astro';
---

<PrimaryLayout title="Admin Maquiavelo Wines">
	<body class="bg-gray-100 font-sans text-gray-800">
		<div class="mx-auto my-16 grid max-w-xl text-center lg:my-32">
			<h1 class="mb-6 text-3xl font-bold">Panel de administración</h1>

			<!-- Login UI -->
			<div id="login-ui" class="mb-6">
				<input
					id="password-input"
					type="password"
					placeholder="Contraseña"
					class="mb-2 w-full rounded border p-2 dark:text-slate-700"
				/>
				<button
					id="login-btn"
					class="w-full rounded bg-blue-600 px-4 py-2 text-white hover:bg-blue-700"
				>
					Iniciar sesión
				</button>
				<p id="login-msg" class="mt-2 text-sm text-red-600"></p>
			</div>

			<!-- Logout Button -->
			<button
				id="logout-btn"
				class="mb-6 hidden w-full rounded bg-red-600 px-4 py-2 text-white hover:bg-red-700"
			>
				Cerrar sesión
			</button>

			<p id="user-info" class="mb-6 font-medium"></p>

			<!-- Admin Panel -->
			<div id="admin-panel" class="hidden rounded bg-white p-6 shadow dark:bg-slate-700">
				<h2 class="mb-4 text-xl font-semibold">Actualizar stock de productos</h2>

				<div class="mb-4">
					<label for="product-select" class="mb-1 block font-medium">Producto:</label>
					<select id="product-select" class="w-full rounded border p-2 dark:text-slate-700"
					></select>
				</div>

				<div class="mb-4">
					<label for="stock-input" class="mb-1 block font-medium">¿Hay stock disponible?</label>
					<select id="stock-input" class="w-full rounded border p-2 dark:text-slate-700">
						<option value="true">Sí</option>
						<option value="false">No</option>
					</select>
				</div>

				<button
					id="update-stock-btn"
					class="rounded bg-green-600 px-4 py-2 text-white hover:bg-green-700"
				>
					Actualizar Stock
				</button>
				<p id="status-msg" class="mt-4 text-sm text-gray-700 dark:text-gray-100"></p>
			</div>
		</div>

		<script is:inline>
			document.addEventListener('DOMContentLoaded', () => {
				const loginBtn = document.getElementById('login-btn');
				const logoutBtn = document.getElementById('logout-btn');
				const userInfo = document.getElementById('user-info');
				const adminPanel = document.getElementById('admin-panel');
				const productSelect = document.getElementById('product-select');
				const stockInput = document.getElementById('stock-input');
				const updateBtn = document.getElementById('update-stock-btn');
				const statusMsg = document.getElementById('status-msg');
				const passwordInput = document.getElementById('password-input');
				const loginMsg = document.getElementById('login-msg');

				let token = localStorage.getItem('admin-token') || null; // Leer token guardado

				function updateUI(isLoggedIn) {
					if (isLoggedIn) {
						loginBtn.classList.add('hidden');
						passwordInput.classList.add('hidden');
						logoutBtn.classList.remove('hidden');
						userInfo.textContent = 'Administrador conectado';
						adminPanel.classList.remove('hidden');
						loginMsg.textContent = '';
						loadProducts();
					} else {
						loginBtn.classList.remove('hidden');
						passwordInput.classList.remove('hidden');
						logoutBtn.classList.add('hidden');
						userInfo.textContent = '';
						adminPanel.classList.add('hidden');
						products = [];
						productSelect.innerHTML = '';
						passwordInput.value = '';
						statusMsg.textContent = '';
						loginMsg.textContent = '';
						token = null;
						localStorage.removeItem('admin-token'); // Limpiar token al logout
					}
				}

				function loadProducts() {
					fetch('/.netlify/functions/get-products', {
						method: 'GET',
						headers: {
							'x-admin-token': token,
						},
					})
						.then((res) => {
							if (!res.ok) throw new Error(`Error al cargar productos: ${res.status}`);
							return res.json();
						})
						.then((data) => {
							products = data;
							productSelect.innerHTML = '';
							data.forEach((prod) => {
								const opt = document.createElement('option');
								opt.value = prod.id;
								opt.textContent = `${prod.name} (${prod.stock ? 'Disponible' : 'Agotado'})`;
								productSelect.appendChild(opt);
							});
							statusMsg.textContent = '';
						})
						.catch((err) => {
							statusMsg.textContent = err.message;
						});
				}

				updateBtn.onclick = () => {
					const productId = productSelect.value;
					const stockValue = stockInput.value === 'true';

					if (!productId) {
						statusMsg.textContent = 'Selecciona un producto.';
						return;
					}

					statusMsg.textContent = 'Actualizando stock...';

					fetch('/.netlify/functions/update-stock', {
						method: 'POST',
						headers: {
							'Content-Type': 'application/json',
							'x-admin-token': token,
						},
						body: JSON.stringify({ productId, stock: stockValue }),
					})
						.then((res) => res.json())
						.then((resp) => {
							if (resp.success) {
								statusMsg.textContent = 'Stock actualizado correctamente.';
								const product = products.find((p) => p.id === productId);
								if (product) {
									product.stock = stockValue;
									loadProducts();
								}
							} else {
								statusMsg.textContent = 'Error al actualizar stock: ' + (resp.error || '');
							}
						})
						.catch(() => {
							statusMsg.textContent = 'Error al actualizar stock.';
						});
				};

				loginBtn.onclick = () => {
					const pw = passwordInput.value.trim();
					if (!pw) {
						loginMsg.textContent = 'Por favor ingresa una contraseña';
						return;
					}
					loginMsg.textContent = '';
					fetch('/.netlify/functions/login-admin', {
						method: 'POST',
						headers: {
							'Content-Type': 'application/json',
						},
						body: JSON.stringify({ password: pw }),
					})
						.then((res) => res.json().then((data) => ({ status: res.status, data })))
						.then(({ status, data }) => {
							if (status === 200 && data.token) {
								token = data.token;
								localStorage.setItem('admin-token', token); // Guardar token
								updateUI(true);
							} else {
								loginMsg.textContent = 'Contraseña incorrecta';
								token = null;
								localStorage.removeItem('admin-token');
								updateUI(false);
							}
						})
						.catch(() => {
							loginMsg.textContent = 'Error en la conexión';
							token = null;
							localStorage.removeItem('admin-token');
							updateUI(false);
						});
				};

				logoutBtn.onclick = () => {
					updateUI(false);
				};

				// Inicializar UI según si hay token guardado
				updateUI(!!token);
			});
		</script>
	</body>
</PrimaryLayout>
