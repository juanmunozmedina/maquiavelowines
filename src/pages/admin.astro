---
import { Breadcrumbs } from 'astro-breadcrumbs';
import PrimaryLayout from '~/layouts/PrimaryLayout.astro';

import 'astro-breadcrumbs/breadcrumbs.css';
---

<PrimaryLayout title="Admin Bodegas Maquiavelo">
	<main class="breakout mt-8 gap-y-8">
		<Breadcrumbs
			linkTextFormat="capitalized"
			customizeLinks={[
				{
					index: 1,
					'aria-disabled': true,
				},
			]}
		>
			<svg
				slot="index"
				aria-label="Home Page"
				xmlns="http://www.w3.org/2000/svg"
				width="24"
				height="24"
				viewBox="0 0 24 24"
				fill="none"
				stroke="currentColor"
				stroke-width="2"
				stroke-linecap="round"
				stroke-linejoin="round"
				><path d="m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"> </path><polyline
					points="9 22 9 12 15 12 15 22"></polyline>
			</svg>
			<svg
				slot="separator"
				xmlns="http://www.w3.org/2000/svg"
				width="24"
				height="24"
				viewBox="0 0 24 24"
				fill="none"
				stroke="currentColor"
				stroke-width="2"
				stroke-linecap="round"
				stroke-linejoin="round"
				><polyline points="9 18 15 12 9 6"></polyline>
			</svg>
		</Breadcrumbs>
		<body class="bg-gray-100 font-sans text-gray-800">
			<div class="mx-auto my-16 grid max-w-xl text-center lg:my-32">
				<h1 class="mb-6 text-3xl font-bold">Panel de administraci√≥n</h1>

				<!-- Login UI -->
				<div id="login-ui" class="mb-6">
					<input
						id="password-input"
						type="password"
						placeholder="Contrase√±a"
						class="mb-2 w-full rounded border p-2 dark:text-slate-700"
					/>
					<button
						id="login-btn"
						class="w-full rounded bg-blue-600 px-4 py-2 text-white hover:bg-blue-700"
					>
						Iniciar sesi√≥n
					</button>
					<p id="login-msg" class="mt-2 text-sm text-red-600"></p>
				</div>

				<!-- Logout Button -->
				<button
					id="logout-btn"
					class="mb-6 hidden w-full rounded bg-red-600 px-4 py-2 text-white hover:bg-red-700"
				>
					Cerrar sesi√≥n
				</button>

				<!-- Admin Panel -->
				<div id="admin-panel" class="hidden rounded bg-theme-base-100 p-6 shadow dark:bg-slate-700">
					<h2 class="mb-4 text-xl font-semibold">Actualizar stock de productos</h2>
					<!-- Spinner -->
					<div
						id="spinner"
						class="mb-4 hidden items-center justify-center text-center text-sm text-gray-500"
					>
						<svg
							class="mr-2 h-5 w-5 animate-spin text-gray-500"
							xmlns="http://www.w3.org/2000/svg"
							fill="none"
							viewBox="0 0 24 24"
						>
							<circle
								class="opacity-25"
								cx="12"
								cy="12"
								r="10"
								stroke="currentColor"
								stroke-width="4"></circle>
							<path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"
							></path>
						</svg>
						Cargando productos...
					</div>

					<div class="selectors">
						<div class="mb-4">
							<label for="product-select" class="mb-1 block font-medium">Producto:</label>
							<select
								id="product-select"
								class="bg-[url('data:image/svg+xml;utf8,<svg fill=black height=10 viewBox=0 0 20 20
  width=10 xmlns=http://www.w3.org/2000/svg><polygon
  points=0,0 20,0 10,10/></svg>')] w-full appearance-none overflow-y-auto rounded border bg-white bg-[length:10px_10px] bg-[right_0.75rem_center] bg-no-repeat
  p-2 pr-8 text-center dark:text-slate-700"
							></select>
						</div>

						<div class="mb-4">
							<label for="stock-input" class="mb-1 block font-medium"
								>Cambiar estado de stock a:</label
							>
							<select
								id="stock-input"
								class="w-full cursor-default appearance-none rounded border bg-gray-300 bg-none p-2 text-center opacity-75 dark:text-slate-700"
							>
								<option value="true">Disponible</option>
								<option value="false">Agotado</option>
							</select>
						</div>

						<button
							id="update-stock-btn"
							class="rounded bg-green-600 px-4 py-2 text-white hover:bg-green-700"
						>
							Actualizar stock
						</button>
					</div>

					<div
						id="status-msg"
						class="mt-4 flex items-center gap-2 text-sm transition-all duration-300"
					>
					</div>
				</div>
			</div>

			<script type="module" is:inline>
				document.addEventListener('DOMContentLoaded', () => {
					const loginBtn = document.getElementById('login-btn');
					const logoutBtn = document.getElementById('logout-btn');
					const adminPanel = document.getElementById('admin-panel');
					const productSelect = document.getElementById('product-select');
					const stockInput = document.getElementById('stock-input');
					const updateBtn = document.getElementById('update-stock-btn');
					const statusMsg = document.getElementById('status-msg');
					const passwordInput = document.getElementById('password-input');
					const loginMsg = document.getElementById('login-msg');

					let token = localStorage.getItem('admin-token') || null;
					let products = [];

					function updateUI(isLoggedIn) {
						if (isLoggedIn) {
							loginBtn.classList.add('hidden');
							passwordInput.classList.add('hidden');
							logoutBtn.classList.remove('hidden');
							adminPanel.classList.remove('hidden');
							loginMsg.textContent = '';
							loadProducts();
						} else {
							loginBtn.classList.remove('hidden');
							passwordInput.classList.remove('hidden');
							logoutBtn.classList.add('hidden');
							adminPanel.classList.add('hidden');
							products = [];
							productSelect.innerHTML = '';
							passwordInput.value = '';
							statusMsg.textContent = '';
							token = null;
							localStorage.removeItem('admin-token');
						}
					}

					function loadProducts() {
						const spinner = document.getElementById('spinner');
						const selectors = document.querySelector('.selectors');
						spinner.classList.remove('hidden'); // Mostrar spinner
						selectors.classList.add('hidden'); // Ocultar el form

						fetch(`/.netlify/functions/get-products?_=${Date.now()}`, {
							method: 'GET',
							headers: {
								'x-admin-token': token,
							},
							cache: 'no-store',
						})
							.then((res) => {
								if (res.status === 401) {
									updateUI(false);
									throw new Error('Sesi√≥n expirada, por favor inicia sesi√≥n de nuevo.');
								}
								if (!res.ok) throw new Error(`Error al cargar productos: ${res.status}`);
								return res.json();
							})
							.then((data) => {
								products = data;
								productSelect.innerHTML = '';
								data.forEach((prod) => {
									const opt = document.createElement('option');
									opt.value = prod.id;
									opt.textContent = `${prod.name} (${prod.stock ? 'Disponible' : 'Agotado'})`;
									productSelect.appendChild(opt);
								});
								statusMsg.textContent = '';

								// üî• Forzar trigger del 'change' para actualizar stock-input con el primer producto
								const event = new Event('change');
								productSelect.dispatchEvent(event);
							})
							.catch((err) => {
								statusMsg.textContent = err.message;
							})
							.finally(() => {
								spinner.classList.add('hidden'); // Ocultar spinner al terminar
								selectors.classList.remove('hidden'); // Mostrar el form
							});

						productSelect.addEventListener('change', () => {
							const selectedId = productSelect.value;
							const selectedProduct = products.find((p) => p.id === selectedId);
							const stockSelect = stockInput;

							if (!selectedProduct) {
								stockSelect.classList.add('hidden');
								return;
							}

							stockSelect.innerHTML = '';
							const option = document.createElement('option');
							option.value = String(!selectedProduct.stock);
							option.textContent = selectedProduct.stock ? 'Agotado' : 'Disponible';
							stockSelect.appendChild(option);

							// Deshabilitar select para que no pueda editarse y ocultar flecha
							stockSelect.disabled = true;
							stockSelect.classList.remove('hidden');
						});
					}

					updateBtn.onclick = () => {
						const productId = productSelect.value;
						const stockValue = stockInput.value === 'true';

						if (!productId) {
							statusMsg.innerHTML = '‚ùå <span>Selecciona un producto.</span>';
							statusMsg.classList.remove('text-green-600');
							statusMsg.classList.add('text-red-600');
							return;
						}

						statusMsg.innerHTML = '‚è≥ <span>Actualizando stock...</span>';
						statusMsg.classList.remove('text-green-600', 'text-red-600');

						fetch('/.netlify/functions/update-stock', {
							method: 'POST',
							headers: {
								'Content-Type': 'application/json',
								'x-admin-token': token,
							},
							body: JSON.stringify({ productId, stock: stockValue }),
						})
							.then((res) => res.json())
							.then((resp) => {
								if (resp.success) {
									statusMsg.innerHTML = '‚úÖ <span>Stock actualizado correctamente.</span>';
									statusMsg.classList.remove('text-red-600');
									statusMsg.classList.add('text-green-600');

									const product = products?.find((p) => p.id === productId);
									if (product) {
										product.stock = stockValue;
										loadProducts();
									}

									setTimeout(() => {
										statusMsg.innerHTML = '';
										statusMsg.classList.remove('text-green-600');
									}, 6000);
								} else {
									statusMsg.innerHTML =
										'‚ùå <span>Error al actualizar stock: ' + (resp.error || '') + '</span>';
									statusMsg.classList.remove('text-green-600');
									statusMsg.classList.add('text-red-600');
								}
							})
							.catch(() => {
								statusMsg.innerHTML = '‚ùå <span>Error al actualizar stock.</span>';
								statusMsg.classList.remove('text-green-600');
								statusMsg.classList.add('text-red-600');
							});
					};

					loginBtn.onclick = () => {
						const pw = passwordInput.value.trim();
						if (!pw) {
							loginMsg.textContent = 'Por favor ingresa una contrase√±a';
							return;
						}
						loginMsg.textContent = '';
						fetch('/.netlify/functions/login-admin', {
							method: 'POST',
							headers: {
								'Content-Type': 'application/json',
							},
							body: JSON.stringify({ password: pw }),
						})
							.then(async (res) => {
								let data = {};
								try {
									data = await res.json();
								} catch (_) {
									// La respuesta no es JSON, ignoramos
								}
								return { status: res.status, data };
							})
							.then(({ status, data }) => {
								if (status === 200 && data.token) {
									token = data.token;
									localStorage.setItem('admin-token', token);
									updateUI(true);
								} else {
									token = null;
									localStorage.removeItem('admin-token');
									updateUI(false);
									loginMsg.textContent = 'Contrase√±a incorrecta';
								}
							})
							.catch(() => {
								token = null;
								localStorage.removeItem('admin-token');
								updateUI(false);
								loginMsg.textContent = 'Error en la conexi√≥n';
							});
					};

					logoutBtn.onclick = () => {
						updateUI(false);
					};

					updateUI(!!token);
				});
			</script>
		</body>
	</main>
</PrimaryLayout>
